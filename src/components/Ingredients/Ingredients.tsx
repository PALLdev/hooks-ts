import React, { useState, useCallback } from "react";
import Ingredient from "../../models/ingredient";
import ErrorModal from "../UI/ErrorModal";

import IngredientForm from "./IngredientForm";
import IngredientList from "./IngredientList";
import Search from "./Search";

const Ingredients: React.FC = () => {
  const [ingredients, setIngredients] = useState<Ingredient[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");

  const addIngredient = async (ingredient: Ingredient): Promise<void> => {
    setIsLoading(true);
    const response = await fetch(
      "https://hooks-ts-default-rtdb.firebaseio.com/ingredientes.json",
      {
        method: "POST",
        body: JSON.stringify({
          title: ingredient.title,
          amount: ingredient.amount,
          createdAt: ingredient.id,
        }),
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
    setIsLoading(false);
    const responseData = await response.json();
    // console.log(responseData.name); // firebase new object autogenerated id
    setIngredients((prevIngredList) => [
      ...prevIngredList,
      {
        id: responseData.name,
        title: ingredient.title,
        amount: ingredient.amount,
      },
    ]);
  };

  const removeItem = (ingredientId: string): void => {
    setIsLoading(true);
    fetch(
      `https://hooks-ts-default-rtdb.firebaseio.com/ingredientes/${ingredientId}.json`,
      {
        method: "DELETE",
      }
    )
      .then((res) => {
        setIsLoading(false);
        setIngredients((prevIngredList) =>
          prevIngredList.filter((ing) => ing.id !== ingredientId)
        );
      })
      .catch((err: Error) => {
        setError(`Hubo un error: ${err.message}`);
        setIsLoading(false);
      });
  };

  const filterIngredients = useCallback((filter: Ingredient[]): void => {
    setIngredients(filter);
  }, []);

  const clearError = () => setError("");

  return (
    <div className="App">
      {error && <ErrorModal onClose={clearError}>{error}</ErrorModal>}

      <IngredientForm onAddIngredient={addIngredient} isLoading={isLoading} />

      <section>
        <Search onFilterIngredients={filterIngredients} />
        <IngredientList items={ingredients} onRemoveItem={removeItem} />
      </section>
    </div>
  );
};

export default Ingredients;
